version: '3.8'

services:
  # API Service
  api:
    build:
      context: ..
      dockerfile: infra/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../:/app
      - ../data:/app/data
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_PERSIST_DIR=/app/data/processed/chroma
      - CHROMA_COLLECTION=rag_collection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_RELOAD=true
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - LLM_MODEL=${LLM_MODEL:-gpt-4.1-mini-2025-04-14}
    depends_on:
      - redis
      - chroma
    networks:
      - rag-network
    restart: unless-stopped
    command: api

  # ChromaDB Service
  chroma:
    image: ghcr.io/chroma-core/chroma:0.5.5
    volumes:
      - ../data/processed/chroma:/chroma/chroma
    ports:
      - "8001:8000"
    environment:
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma
    networks:
      - rag-network
    restart: unless-stopped

  # Redis Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - rag-network
    restart: unless-stopped

  # Ingest Service (on-demand)
  ingest:
    build:
      context: ..
      dockerfile: infra/Dockerfile
    volumes:
      - ../:/app
      - ../data:/app/data
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_PERSIST_DIR=/app/data/processed/chroma
      - CHROMA_COLLECTION=rag_collection
      - PDF_PATH=/app/data/raw
    depends_on:
      - chroma
    networks:
      - rag-network
    profiles:
      - ingest
    command: ingest

volumes:
  redis-data:

networks:
  rag-network:
    driver: bridge
